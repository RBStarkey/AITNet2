@page "/chartjs"
@inject IJSRuntime jsRuntime

<div class="container">
    <div class="row">
        <div class="col-sm-8">
            <canvas id="barGraph"></canvas>
            <canvas id="threeLineGraph"></canvas>
        </div>
        <div class="col-sm-4">
            <h3>ChartJS</h3>
            <h5>
                These graphs are drawn with the free charting library <a href="https://www.chartjs.org/">ChartJS. </a>
                The data is generated by random numbers
            </h5>
            <h5>Try refreshing them-by clicking these buttons...</h5>
            <h5>&nbsp;</h5>
            <button class="btn btn-primary" onclick="refreshBarOnClick()">Bar Graph</button> &nbsp;&nbsp;
            <button class="btn btn-primary" onclick="refresLinehOnClick()">Line Graph</button>
            <h5>&nbsp;</h5>
            <h5>If you hover over a bar or line, a pop-up will show the value at that point.</h5>
            <h5>If this was a continuous feed of data each 'click' would be a new data-set coming from the server.</h5>
            <h5>Examples of all the chart-types can be found <a href="https://www.chartjs.org/samples/latest/">here.</a>.</h5>
            <h5>Note: The page is not refreshed completely, only those parts of the display which have changed are updated.
                This is a wonder brought about by Signal R
            </h5>
        </div>
    </div>

</div>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

        }
        await jsRuntime.InvokeVoidAsync("showCharts");
    }
}

