@page "/validation"
@using Ait2Net
@using Models
@using Data
@using System.IO;
@using System.Text.Json;

<container-fluid>
	<h3>Validation</h3>
	@if (StillLoading)
	{
		<div class="row w-100 h-100">
			<div class="form-row ml-5">
				<h5 class="mt-3">Loading 7,813 names (about 6 seconds)...&nbsp;</h5>
				<div class="spinner-grow text-primary" style="width: 3rem; height: 3rem;" role="status">
				</div>
			</div>
		</div>
	}
	else
	{
		<div class="row p-3">
			<h5>
				Our interfaces are designed to prevent the capture of inaccurate data using constraints.
				Try filling in the fields shown below and watch the system catch your errors.
				Some examples of errors are mentioned in the text. No data is recorded. 
				The last two examples, when viewed on a smart phone, demonstrate the reality of narrow screens to view lots of data.
				All these examples are using Blazor technology.
			</h5>
		</div>

		<div class="card-group">
			<!--Age-->
		<div class="card p-3">
				<div class=row style="background-color:aqua; border-radius:10px">
					<div class=col-sm-11>
						<h4 class="card-title pt-2">How Old Is This Person?</h4>
					</div>
					<div class=col-sm-1>
						<sup>
							<button type="button" class="fas fa-info-circle  ml-auto pt-2"
								@onclick="ShowDobModalClick"
								style="font-size: 1.5em;
                            border: none;
                            color: #0000EE;
                            background-color: transparent;
                            cursor: pointer;
                            outline: hidden">
							</button>

						</sup>
					</div>
				</div>
				<div class="card-body">
					<DemoDoB></DemoDoB>
					<h5 class="card-text">
						The date of birth in this demonstration is constrained to an age on entry in the range 18-60 (inclusive).
					</h5>
					<h5 class="card-text">
						The difficulties of calculating a person's age correctly are extolled
						<a href="https://stackoverflow.com/questions/9/how-do-i-calculate-someones-age-in-c">
							here
						</a>. In the UK, people born on 29th February attain their age the day after but
						this isn't the case in other
						<a href="https://en.wikipedia.org/wiki/February_29">
							jurisdictions.
						</a>
					</h5>
				</div>
			</div>
			<!--List Management-->
		<div class="card p-3">
				<div class=row style="background-color:aqua; border-radius:10px">
					<div class=col-sm-11>
						<h4 class="card-title pt-2">List Management</h4>
					</div>
				</div>
				<div class="card-body">
					<DemoListManager></DemoListManager>
					<h5 class="card-text">
						Maintaining up to date drop-down lists is one of the best ways to ensure data integrity.
					</h5>
					<h5 class="card-text">
						New items would be stored in a database.
					</h5>
					<h5 class="card-text">
						Experience has shown that these lists are best maintained by one person.
					</h5>
				</div>
			</div>
			<!--Help-->
		<div class="card p-3">
				<div class=row style="background-color:aqua; border-radius:10px">
					<div class=col-sm-12>
						<h4 class="card-title pt-2">Getting Help</h4>
					</div>
				</div>
				<div class="form-row mt-2">
					<button type="button" class="fas fa-info-circle ml-5"
						@onclick="ShowHelpLargeModalClick"
						style="font-size:3em;border:none;color:#0000EE;
                        background-color:transparent;cursor:pointer;outline:hidden">
					</button>
					<button type="button" class="fas fa-question-circle ml-5"
						@onclick="ShowHelpSmallModalClick"
						style="font-size: 1em;
                            border: none;
                            color: #0000EE;
                            background-color: transparent;
                            cursor: pointer;
                            outline: hidden">
					</button>
				</div>
				<div class="card-body">
					<h5 class="card-text">
						Help buttons like the ones above should appear on most forms;
						sometimes there might be more than one.
					</h5>
					<h5 class="card-text">
						When clicked, relevant help, information or guidance will be shown.
					</h5>
					<h5 class="card-text">
						Maintaining a help system as the business develops is a chore but
						it is vital to the task of keeping staff informed and on the right track.
					</h5>
				</div>
			</div>
		</div>
		<div class="card-group">
			<!--DemoTitleGender-->
		<div class="card p-3">
				<div class=row style="background-color:aqua; border-radius:10px">
					<div class=col-sm-12>
						<h4 class="card-title pt-2">Drop Down List Selection</h4>
					</div>
				</div>
				<div class="card-body">
					<h5 class="card-text mt-2">
						By selecting a title, you cue the correct selection of Gender and <i>vice-versa</i>.
						Try selecting inconsistent choices.
					</h5>
					<DemoTitleGender></DemoTitleGender>
				</div>
			</div>
			<!--Power BI-->
		<div class="card p-3">
				<div class=row style="background-color:aqua; border-radius:10px">
					<div class=col-sm-12>
						<h4 class="card-title pt-2">Power BI</h4>
					</div>
				</div>
				<div class="card-body">
					<h5 class="card-text mt-3">
						We recommend
						<a href="https://powerbi.microsoft.com/en-us/">
							Power BI
						</a>
						to visualise your data.
					</h5>
					<h5>With a little training you will be able to create your own reports and graphs</h5>
					<h5>
						As part of our implementation service we will set you up and teach you the basics.
					</h5>
					<h5>
						Power BI is free!
					</h5>
				</div>
			</div>
			<!--DemoNINumber-->
		<div class="card p-3">
				<div class=row style="background-color:aqua; border-radius:10px">
					<div class=col-sm-12>
						<h4 class="card-title pt-2">Data With a Specific Format</h4>
					</div>
				</div>
				<div class="card-body">
					<DemoNINumber></DemoNINumber>
					<h5 class="card-text">
						The UK National Insurance Number has strict
						<a href="https://www.gov.uk/hmrc-internal-manuals/national-insurance-manual/nim39110">
							rules
						</a>
						defining it's format. Try cutting and pasting this one: QQ123456C (which is not well formed).
					</h5>
					<h5>
						Data which has a strictly defined format can, in the main, be validated on input e.g. part-numbers, postcodes and the like.
					</h5>
				</div>
			</div>
		</div>
		<div class="card-group">
			<!--DemoLastNameFirstName-->
		<div class="card p-3">
				<div class=row style="background-color:aqua; border-radius:10px">
					<div class=col-sm-12>
						<h4 class="card-title pt-2">Getting the Names Right</h4>
					</div>
				</div>
				<div class="card-body">
					<DemoLastNameFirstName></DemoLastNameFirstName>
					<h5 class="card-text">
						Try adding these badly formatted last names: tHomas iii, double-- barrelled. <br />
						And now try a first name like anna - marie or Jean-paul.<br />
					</h5>
					<h5>
						With mcadam and Macadam and the like the sheer
						<a href="https://britishsurnames.co.uk/surnames/MAC/?p=10">
							number
						</a>
						of different spellings leads us to remove the space and
						take a pragmatic way out by just capitalising where it seems appropriate.
					</h5>
				</div>
			</div>
			<!--Filter and Select BoyAndGirlList-->
		<div class="card p-3">
				<div class=row style="background-color:aqua; border-radius:10px">
					<div class=col-sm-12>
						<h4 class="card-title pt-2">Filter and Select</h4>
					</div>
				</div>
				<div class="card-body">
					<div class="row">
						<h5>Clicking from a short list is the best way to insert accurate data.  The data shown here is from a combined list of 3,535 boy's names and 4,278 girl's names.</h5>
						<h5>
							It is taken from the
							<a href="https://www.nrscotland.gov.uk/statistics-and-data/statistics/statistics-by-theme/vital-events/names/babies-first-names/full-lists-of-babies-first-names-2010-to-2014">
								National Records of Scotland
							</a> and lists the forenames from births in 2019 together with their gender, rank and number.
						</h5>
						<DemoTypeAndFilter BoyAndGirlList="@BoyAndGirlList"></DemoTypeAndFilter>
					</div>
				</div>
			</div>
			<!--Email Address-->
		<div class="card p-3">
				<div class=row style="background-color:aqua; border-radius:10px">
					<div class=col-sm-12>
						<h4 class="card-title pt-2">Email Address</h4>
					</div>
				</div>
				<div class="card-body">

					<h5 class="card-text mt-3">
						Nowadays email is the life blood of commerce but getting the address written down correctly does not always go well.
						In the IT community, the debate on how to assist by validating the email address goes
						<a href="https://stackoverflow.com/questions/201323/how-to-validate-an-email-address-using-a-regular-expression">
							on and on and on.
						</a>
					</h5>
					<h5 class="card-text">
						This demo uses code
						<a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/how-to-verify-that-strings-are-in-valid-email-format">
							provided
						</a>
						by Microsoft. It will catch most instances of a badly formed address and it will
						highlight the fumble-typo where spaces are added or the @@ symbol is forgotten.
					</h5>
					<DemoEmailAddress></DemoEmailAddress>
				</div>
			</div>
		</div>
		<!--Shopping Trolley-->
		<div class="card-group">
			<div class="card p-3">
				<div class="d-flex justify-content-around pt-2"
				 style="height:auto;background-color:aqua;border-radius:10px">
					<h4 class="card-title">Shopping Trolley</h4><h4>Selected List</h4>

				</div>
				<div class="card-body">
					<div class="row">
						<div class="col" style="max-height:30em!important;overflow-y:scroll;display:block">
							<table class="table" style="width:auto">
								<thead class="thead-light">
									<tr>
										<th style="text-align:center">Click image (N times) to add to list</th>
									</tr>
								</thead>
								<tr>
									<td>
										<label class="control-label mt-2">Grannie Smith's Apples</label> <br />
										<button class="button border m-0 p-0" style="width:auto; height:auto"
											@onclick="() => FruitClick(Fruit.Apples)">
											<img src="\Images\Apples.jpg" class="img-thumbnail" alt="Apples" />
										</button>
									</td>
								</tr>
								<tr>
									<td>
										<label class="control-label mt-2">Asparagus</label> <br />
										<button class="button border m-0 p-0" style="width:auto; height:auto"
											@onclick="() => FruitClick(Fruit.Asparagus)">
											<img src="\Images\Asparagus.jpg" class="img-thumbnail" alt="Asparagus" />
										</button>
									</td>
								</tr>
								<tr>
									<td>
										<label class="control-label mt-2">Avocado</label> <br />
										<button class="button border-0 m-0 p-0" style="width:auto; height:auto"
											@onclick="() => FruitClick(Fruit.Avocado)">
											<img src="\Images\Avocado.jpg" class="img-thumbnail" alt="Avocado" />
										</button>

									</td>
								</tr>
								<tr>
									<td>
										<label class="control-label mt-2">Bananas</label> <br />
										<button class="button border-0 m-0 p-0" style="width:auto; height:auto"
											@onclick="() => FruitClick(Fruit.Bananas)">
											<img src="\Images\Bananas.jpg" class="img-thumbnail" alt="Bananas" />
										</button>

									</td>
								</tr>
								<tr>
									<td>
										<label class="control-label mt-2">Blueberries</label> <br />
										<button class="button border-0 m-0 p-0" style="width:auto; height:auto"
											@onclick="() => FruitClick(Fruit.Blueberries)">
											<img src="\Images\Blueberries.jpg" class="img-thumbnail" alt="Blueberries" />
										</button>
									</td>
								</tr>
								<tr>
									<td>
										<label class="control-label mt-2">Corn</label> <br />
										<button class="button border-0 m-0 p-0" style="width:auto; height:auto"
											@onclick="() => FruitClick(Fruit.Corn)">
											<img src="\Images\Corn.jpg" class="img-thumbnail" alt="Corn" />
										</button>
									</td>
								</tr>
								<tr>
									<td>
										<label class="control-label mt-2">Eggs</label> <br />
										<button class="button border-0 m-0 p-0" style="width:auto; height:auto"
											@onclick="() => FruitClick(Fruit.Eggs)">
											<img src="\Images\Eggs.jpg" class="img-thumbnail" alt="Eggs" />
										</button>
									</td>
								</tr>
								<tr>
									<td>
										<label class="control-label mt-2">Limes</label> <br />
										<button class="button border-0 m-0 p-0" style="width:auto; height:auto"
											@onclick="() => FruitClick(Fruit.Limes)">
											<img src="\Images\Limes.jpg" class="img-thumbnail" alt="Limes" />
										</button>
									</td>
								</tr>
								<tr>
									<td>
										<label class="control-label mt-2">Peas</label> <br />
										<button class="button border-0 m-0 p-0" style="width:auto; height:auto"
											@onclick="() => FruitClick(Fruit.Peas)">
											<img src="\Images\Peas.jpg" class="img-thumbnail" alt="Peas" />
										</button>
									</td>
								</tr>
								<tr>
									<td>
										<label class="control-label mt-2">Raspberries</label> <br />
										<button class="button border-0 m-0 p-0" style="width:auto; height:auto"
											@onclick="() => FruitClick(Fruit.Raspberries)">
											<img src="\Images\Raspberries.jpg" class="img-thumbnail" alt="Raspberries" />
										</button>
									</td>
								</tr>
								<tr>
									<td>
										<label class="control-label mt-2">Rhubarb</label> <br />
										<button class="button border-0 m-0 p-0" style="width:auto; height:auto"
											@onclick="() => FruitClick(Fruit.Rhubarb)">
											<img src="\Images\Rhubarb.jpg" class="img-thumbnail" alt="Rhubarb" />
										</button>
									</td>
								</tr>
							</table>
						</div>
						<div class="col mt-2">
							<table class="table table table-striped" style="min-height:30em;max-height:30em;overflow-y:scroll;display:block">
								<thead class="thead-light">
									<tr>
										<th style="text-align:center;width:12em" scope="col">Name</th>
										<th style="text-align:center;width:3em" scope="col">Qty</th>
										<th style="text-align:center" scope="col">Remove</th>
									</tr>
								</thead>
								<tbody>
									@foreach (FruitItem item in FruitList)
									{
										<tr>

											<td>@item.ItemName</td>
											<td style="text-align:center">@item.Quantity</td>
											<td style="text-align:center">
												<button class="button btn-danger"
												@onclick="() => RemoveSingleItem(item.ItemName)">
													<strong>-1</strong>
												</button>
											</td>
										</tr>
									}
								</tbody>
								<tfoot>
									<tr>
										<th style="text-align:right;width:12em">Total:&nbsp;</th>
										<th style="text-align:center;width:3em" scope="col">
											<h5 class="float-left">@ItemCount.ToString()</h5>
										</th>
										<th style="text-align:center" scope="col"></th>
									</tr>

								</tfoot>
							</table>
						</div>
					</div>
				</div>
			</div>
			<!--Postcode-->
		<div class="card p-3">
				<div class="d-flex justify-content-around pt-2"
				 style="height:auto;background-color:aqua;border-radius:10px">
					<h4 class="card-title">Acurate Postcodes</h4><h4>Results</h4>
				</div>
				<div class="card-body">
					<DemoPostCode></DemoPostCode>
				</div>
			</div>
		</div>

		@if (ShowModal)
		{
			<div class="modal" tabindex="-1" style="display:block;" role="dialog">
				<div class="modal-dialog @modalCSSSize">
					<div class="modal-content">
						<div class="modal-header" style="background-color:navy;color:white">
							<h3 class="modal-title">
								Help
							</h3>
						</div>
						<div class="modal-body">
							<h4>Advice</h4>
							<h5>
								A source of help, advice and <em>experience</em> close to where the user completes a field
								will reduce stress and improve the quality of data.
							</h5>
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-primary"
							@onclick="HideHelpModalClick">
								Close
							</button>
						</div>
					</div>
				</div>
			</div>
		}
		@if (ShowDoBModal)
		{
			<div class="modal" tabindex="-1" style="display:block;" role="dialog">
				<div class="modal-dialog modal-sm">
					<div class="modal-content">
						<div class="modal-header" style="background-color:navy;color:white">
							<h3 class="modal-title">
								Help - Date of Birth
							</h3>
						</div>
						<div class="modal-body">
							<h4>Format</h4>
							<h5>
								The field expects a date in the form D or DD Mmm YYYY where Mnn stands for Jan, Feb etc. etc.
								Try leaving a part out or putting a letter where numbers should be.
							</h5>
							<h4>Leap Years</h4>
							<h5>
								Try inserting 29 Feb 2000.
							</h5>
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-primary"
							@onclick="HideDobModalClick">
								Close
							</button>
						</div>
					</div>
				</div>
			</div>
		}
	}
</container-fluid>
@code {
	private bool StillLoading = true;
	private bool ShowDoBModal = false;
	private bool ShowModal = false;
	private string modalCSSSize = "modal-sm";
	private int ItemCount = 0;
	private string PassKey = string.Empty;

	List<FruitItem> FruitList = new List<FruitItem>();


	public List<BoyAndGirl> BoyAndGirlList { get; set; }

	protected override void OnInitialized()
	{
		LoadBoyAndGirlList();

		StillLoading = false;
	}
	private void ShowHelpLargeModalClick()
	{
		modalCSSSize = "modal-lg";
		ShowModal = true;
	}
	private void ShowHelpSmallModalClick()
	{
		modalCSSSize = "modal-sm";
		ShowModal = true;
	}
	private void HideHelpModalClick()
	{
		ShowModal = false;
	}

	private void FruitClick(string itemName)
	{
		FruitItem existingItem = FruitList.Find(x => x.ItemName == itemName);
		if (existingItem == null)
		{
			FruitItem newItem = new FruitItem();
			newItem.ItemName = itemName;
			newItem.Quantity = 1;
			FruitList.Add(newItem);
			if (FruitList.Count > 1)
			{
				FruitList = FruitList.OrderBy(x => x.ItemName).ToList();
			}
			ItemCount += 1;
		}
		else
		{
			existingItem.Quantity += 1;
			ItemCount += 1;
		}
	}
	private void RemoveSingleItem(string itemName)
	{
		FruitItem existingItem = FruitList.Find(x => x.ItemName == itemName);
		if (existingItem.Quantity == 1)
		{
			FruitList.Remove(existingItem);
		}
		else
		{
			existingItem.Quantity -= 1;
		}
		ItemCount -= 1;
	}

	private void ShowDobModalClick()
	{
		ShowDoBModal = true;
	}
	private void HideDobModalClick()
	{
		ShowDoBModal = false;
	}

	private void LoadBoyAndGirlList()
	{
		string json = File.ReadAllText("Data/BoysAndGirls.json");
		BoyAndGirlList = JsonSerializer.Deserialize<List<BoyAndGirl>>(json);
	}
}



